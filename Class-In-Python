class MyClass:
  x = 5

print(MyClass)     #     <class '__main__.MyClass'>

# you can write like that
class MyClass:
  x = 5
# Create an object named p1, and print the value of x:
p1 = MyClass()
print(p1.x)         #   5
-----------------------------------------------------------
The __init__() Function
The examples above are classes and objects in their simplest form, and are not really useful in real life applications.

To understand the meaning of classes we have to understand the built-in __init__() function.

All classes have a function called __init__(), which is always executed when the class is being initiated.

Use the __init__() function to assign values to object properties, or other operations that are necessary to do when the object is being created:

Example
Create a class named Person, use the __init__() function to assign values for name and age:

Note: The __init__() function is called automatically every time the class is being used to create a new object.

class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

p1 = Person("John", 36)

print(p1.name)   #  John
print(p1.age)    #  36
-------------------------------------------------------------------------------------------
Object Methods
Objects can also contain methods. Methods in objects are functions that belongs to the object.

Let us create a method in the Person class:

Example
Insert a function that prints a greeting, and execute it on the p1 object:
class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def myfunc(self):
    print("Hello my name is " + self.name)

p1 = Person("John", 36)
p1.myfunc()     #      Hello my name is John

Note: The self parameter is a reference to the class instance itself, and is used to access variables that belongs to the class.

The self Parameter
The self parameter is a reference to the class itself, and is used to access variables that belongs to the class.

It does not have to be named self , you can call it whatever you like, but it has to be the first parameter of any function in the class:
class Person:
  def __init__(mysillyobject, name, age):
    mysillyobject.name = name
    mysillyobject.age = age

  def myfunc(abc):
    print("Hello my name is " + abc.name)

p1 = Person("John", 36)
p1.myfunc()         #            #      Hello my name is John

p1.age = 40
print(p1.age)       #    40

#       You can delete properties on objects by using the del keyword:
del p1.age
print(p1.age)  #  if u want to  prin it'll give error below
'''
Traceback (most recent call last):
  File "E:\eclipse\python\corePython\CorePythonDemo\com\ctc\python\ClassPython.py", line 18, in <module>
    print(p1.age)
AttributeError: 'Person' object has no attribute 'age'
'''
del p1
print(p1)  #   #  if u want to  prin it'll give error below  
'''
 print(p1)
NameError: name 'p1' is not defined
'''











