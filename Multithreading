# biggest advantage of multithreading  performance will improve
# if jobs are independent then we can go threading concept
# process based multitasking is OS level normally but application based also there if u used octa & quard quor
# thread ia a part of one process, a flow of execution is considered as a thread
# ingeneral every web app by default can take 60 req simunaltusenly
# for every req one thread will create
# in python by default create one thread which name is, MainThread
# main thread ia responsible to create child thread and start also,once child thread
# started it will become seprate from main thread
'''
3 way to define a thread
1> creating a thread without using any class
2> creatingg a thread by extending Thread class
3> creating a thread without extending Thread class



import threading    #  not recommended
#from threading import *
#threading.current_thread()
print('currenting thread :',threading.current_thread().getName()) # currenting thread : MainThread
print('hello')
'''

# 1> creating a thread without using any class   (this  is functional oriented way)
from threading import *
import threading
def display():
    for i in range(10):
        print('child thread name',current_thread().getName())  # Thread-1
# above for loop responsible to child thread
# main thread ia responsible to create child thread and start also,once child thread
# started it will become seprate from main thread
t=Thread(target=display) # creation of thread obj to excute display
t.start()

for i in range(10):
    print('main thread  ')
print('main thread name :',threading.current_thread().getName()) #main thread name : MainThread
# above for loop responsible to main thread
'''
child thread
main thread
main thread
main thread
main thread
main thread
child thread
main thread
child thread
child thread
child thread
child thread
child thread
child thread
child thread
child thread
main thread
main thread
main thread
main thread
we cant except o/p
'''

------------------------------------------------------------------------------------
# this is oop style creating thread
# 2> creatingg a thread by extending Thread class


from threading import *
class MyThread(Thread):
    def run(self):
        for i in range(10):
            print('child Thread')
t=MyThread()
t.start()
for i in range(10):
    print('main thread')
'''
child Thread
main thread
child Thread
main thread
child Thread
main thread
child Thread
main thread
child Thread
main thread
child Thread
main thread
child Thread
main thread
child Thread
main thread
child Thread
main thread
main thread
child Thread
'''
-----------------------------------------------------------------------------------------
# 3> creating a thread without extending Thread class
# without extending Thread class but still will call OOP way
from threading import  *
class test:
    def m1(self):
        for i in range(10):
            print('child thread')
obj=test()
t=Thread(target=obj.m1)
t.start()
for i in range(10):
    print('main thread')

'''
child thread
main thread
child thread
main thread
child thread
main thread
child thread
main thread
child thread
main thread
child thread
child thread
main thread
main thread
child thread
main thread
child thread
child thread
main thread
main thread

'''
----------------------------------------------------------------------------------------
#TIME CALCULATION WHICH ONE IS GOOD MAIN THREAD OR MULTITHREAD

'''
# using main method only
import time
def doubles(numbers):
    for n in numbers:
        time.sleep(1)
        print('Double value :',2*n)

def squares(numbers):
    for n in numbers:
        time.sleep(1)
        print('Squares value :',n*n)

numbers=[1,2,3,4,5,6]
begintime=time.time()
doubles(numbers)
squares(numbers)
endtime=time.time()
print('The total time taken: ',endtime-begintime)

Double value : 2
Double value : 4
Double value : 6
Double value : 8
Double value : 10
Double value : 12
Squares value : 1
Squares value : 4
Squares value : 9
Squares value : 16
Squares value : 25
Squares value : 36
The total time taken:  12.20591425895691
'''
# using multithreading concept see how much time its take
import time
from threading import *
def doubles(numbers):
    for n in numbers:
        time.sleep(1)
        print('Double value :',2*n)

def squares(numbers):
    for n in numbers:
        time.sleep(1)
        print('Squares value :',n*n)

numbers=[1,2,3,4,5,6]
begintime=time.time()
t1=Thread(target=doubles,args=(numbers,)) # we hv to pass tupile as a args
t2=Thread(target=squares,args=(numbers,))
t1.start()
t2.start()

t1.join() # if thred want to waits until other thread here main thread will wait until cmplt t1
t2.join() # if thred want to waits until other thread here main thread will wait until cmplt t2

endtime=time.time()
print('The total time taken: ',endtime-begintime)
'''
Squares value : 1
Double value : 2
Squares value : 4
Double value : 4
Squares value : 9
Double value : 6
Squares value : 16
Double value : 8
Squares value : 25
Double value : 10
Squares value : 36
Double value : 12
The total time taken:  6.009359121322632
'''
